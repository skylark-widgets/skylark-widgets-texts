{"version":3,"sources":["skylark-widgets-texts.js"],"names":["define","skylark","attach","Widget","texts","TextBox","inherit","_construct","parent","prototype","call","this","skin","getSkin","_elm","type","style","backgroundColor","boxColor","color","textColor","margin","outline","borderStyle","boxSizing","textIndent","borderRadius","setFont","fontFamily","fontWeight","fontStyle","undefined","setDisabled","value","disabled","setOnInput","onInput","timeout","timer","oninput","event","clearTimeout","setTimeout","setOnChange","onChange","onchange","setText","text","getText","PasswordBox","Panel","ImagePane","SearchBox","klassName","search","setMode","TOP_RIGHT","searchIcon","setImage","searchIconUrl","callback","updateSize","size","set","y","position","updateInterface","x","TextMixin","TextLabel","_buildTextSpan","CENTER","LEFT","RIGHT","TOP","BOTTOM","CLIP","ELLIPSIS","TextArea","overflow","resize","font","setWrap","mode","wrap","setValue","getValue","SOFT","HARD","main"],"mappings":"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","file":"../skylark-widgets-texts.js","sourcesContent":["define('skylark-widgets-texts/texts',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark) {\r\n\tvar texts = {};\r\n\r\n\treturn skylark.attach(\"widgets.texts\",texts);\r\n\r\n});\r\n\r\n\ndefine('skylark-widgets-texts/text-box',[\r\n\t\"skylark-widgets-base/widget\",\r\n\t\"./texts\"\t\r\n],function(Widget,texts){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * text input widget.\r\n\t * \r\n\t * @class TextBox\r\n\t * @extends {Component}\r\n\t * @param {Component} parent Parent widget.\r\n\t */\r\n\tvar TextBox = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"input\");\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.type = \"text\";\r\n\t\t\t//this._elm.style.backgroundColor = Editor.theme.boxColor;\r\n\t\t\tthis._elm.style.backgroundColor = skin.boxColor;\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.margin = \"0\";\r\n\t\t\tthis._elm.style.outline = \"none\";\r\n\t\t\tthis._elm.style.borderStyle = \"none\";\r\n\t\t\tthis._elm.style.boxSizing = \"border-box\";\r\n\t\t\tthis._elm.style.textIndent = \"4px\";\r\n\t\t\tthis._elm.style.borderRadius = \"4px\";\r\n\r\n\t\t\tvar self = this;\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\tthis._elm.oncontextmenu = function(event) {\r\n\t\t\t\tvar context = new ContextMenu(DocumentBody);\r\n\t\t\t\tcontext.size.set(130, 20);\r\n\t\t\t\tcontext.position.set(event.clientX, event.clientY);\r\n\t\t\t\tcontext.addOption(Locale.copy, function()\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tEditor.clipboard.set(value.slice(self.element.selectionStart, self.element.selectionEnd), \"text\");\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.cut, function()\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tEditor.clipboard.set(value.slice(self.element.selectionStart, self.element.selectionEnd), \"text\");\r\n\t\t\t\t\tself.element.value = value.slice(0, self.element.selectionStart) + value.slice(self.element.selectionEnd, value.length);\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.paste, function()\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tvar paste = Editor.clipboard.get(\"text\");\r\n\t\t\t\t\tif(paste !== undefined)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tself.element.value = value.slice(0, self.element.selectionStart) + paste + value.slice(self.element.selectionEnd, value.length);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.selectAll, function()\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(self.element);\r\n\t\t\t\t\tself.element.select();\r\n\t\t\t\t});\r\n\t\t\t\tcontext.updateInterface();\r\n\t\t\t};\r\n\t\t\t*/\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set font configuration to use for the text presented in this component.\r\n\t\t *\r\n\t\t * May also affect some types of children components. \r\n\t\t * \r\n\t\t * @method setFont\r\n\t\t * @param {string} fontFamily Font family.\r\n\t\t * @param {number} fontWeight Font weigth, sets how thick or thin characters in text should be displayed.\r\n\t\t * @param {string} fontStyle Font style, specifies the font style for a text.\r\n\t\t */\r\n\t\tsetFont : function(fontFamily, fontWeight, fontStyle) {\r\n\t\t\tthis._elm.style.fontFamily = fontFamily;\r\n\r\n\t\t\tif(fontWeight !== undefined) {\r\n\t\t\t\tthis._elm.style.fontWeight = fontWeight;\r\n\t\t\t}\r\n\r\n\t\t\tif(fontStyle !== undefined)\t{\r\n\t\t\t\tthis._elm.style.fontStyle = fontStyle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set the disabled state of the element.\r\n\t\t *\r\n\t\t * @method setDisabled\r\n\t\t * @param {boolean} disabled\r\n\t\t */\r\n\t\tsetDisabled : function(value) {\r\n\t\t\tthis._elm.disabled = value;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set oninput callback called after every letter typed into the box.\r\n\t\t *\r\n\t\t * Should be used only for immediate input effect, or can be used with a timeout value to prevent high CPU usage.\r\n\t\t *\r\n\t\t * @method setOnInput\r\n\t\t * @param {Function} onInput Callback method called everytime the user types something.\r\n\t\t * @param {number} timeout Time (ms) after the user stopped typing to activate the callback.\r\n\t\t */\r\n\t\tsetOnInput : function(onInput, timeout) {\r\n\t\t\tif(timeout !== undefined) {\r\n\t\t\t\tvar timer = null;\r\n\t\t\t\tvar self = this;\r\n\r\n\t\t\t\tthis._elm.oninput = function(event) {\r\n\t\t\t\t\tif(timer !== null) {\r\n\t\t\t\t\t\tclearTimeout(timer);\r\n\t\t\t\t\t\ttimer = null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttimer = setTimeout(function(){\r\n\t\t\t\t\t\tonInput();\r\n\t\t\t\t\t\ttimer = null;\r\n\t\t\t\t\t}, timeout)\r\n\t\t\t\t};\r\n\t\t\t} else \t{\r\n\t\t\t\tthis._elm.oninput = onInput;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set onchange callback, called after changes.\r\n\t\t *\r\n\t\t * @method setOnChange\r\n\t\t * @param {Function} onChange\r\n\t\t */\r\n\t\tsetOnChange : function(onChange) {\r\n\t\t\tthis._elm.onchange = onChange;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set value stored in the input element.\r\n\t\t *\r\n\t\t * @method setText\r\n\t\t * @param {Object} text\r\n\t\t */\r\n\t\tsetText : function(text) {\r\n\t\t\tthis._elm.value = text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get text stored in the input element.\r\n\t\t *\r\n\t\t * @method getText\r\n\t\t * @return {string} Text stored in the input element.\r\n\t\t */\r\n\t\tgetText : function() {\r\n\t\t\treturn this._elm.value;\r\n\t\t}\r\n\t});\r\n\r\n\treturn texts.TextBox = TextBox;\r\n});\ndefine('skylark-widgets-texts/password-box',[\n\t\"./texts\",\n\t\"./text-box\"\n],function(TextBox){\n\t\"use strict\";\n\n\t/**\n\t * password text input widget.\n\t * \n\t * @class PasswordBox\n\t * @extends {TextBox}\n\t * @param {Widget} parent Parent widget.\n\t */\n\tvar PasswordBox = Widget.inherit({\n\n\t\t_construct : function (parent) {\n\t\t\tTextBox.prototype._construct.call(this, parent);\n\n\t\t\tthis._elm.type = \"password\";\n\t\t}\n\t});\n\n\treturn texts.PasswordBox = PasswordBox;\n});\n\ndefine('skylark-widgets-texts/search-box',[\r\n\t\"skylark-widgets-base/widget\",\r\n\t\"skylark-widgets-base/panels/panel\",\r\n\t\"skylark-widgets-base/image-pane\",\r\n\t\"./texts\",\r\n\t\"./text-box\"\r\n],function(\r\n\tWidget,\r\n\tPanel,\r\n\tImagePane,\r\n\ttexts,\r\n\tTextBox\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Search box input element.\r\n\t * \r\n\t * @class SearchBox\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent element.\r\n\t */\r\n\tvar SearchBox = Panel.inherit({\r\n\t\t\"klassName\" : \"SearchBox\",\r\n\t\t\"_construct\" : function(parent)\t{\r\n\t\t\tPanel.prototype._construct.call(this, parent, \"div\");\r\n\r\n\t\t\t/**\r\n\t\t\t * Input text box of the search box.\r\n\t\t\t *\r\n\t\t\t * @property search\r\n\t\t\t * @type {TextBox}\r\n\t\t\t */\r\n\t\t\tthis.search = new TextBox(this);\r\n\t\t\tthis.search.setMode(Widget.TOP_RIGHT);\r\n\r\n\r\n\t\t\t//this.search.element.placeholder = Locale.search;\r\n\r\n\t\t\t/**\r\n\t\t\t * Search icon.\r\n\t\t\t *\r\n\t\t\t * @property searchIcon\r\n\t\t\t * @type {DOM}\r\n\t\t\t */\r\n\t\t\tthis.searchIcon = new ImagePane(this);\r\n\t\t\tvar skin = this.getSkin();\r\n\t\t\t//this.searchIcon.setImage(Global.FILE_PATH + \"icons/misc/search.png\");\r\n\t\t\tthis.searchIcon.setImage(skin.searchIconUrl);\r\n\t\t\tthis.searchIcon.setImage(skin.searchIconUrl);\r\n\t\t},\r\n\r\n\t\tsetOnChange : function(callback) {\r\n\t\t\tthis.search.setOnInput(callback, 100);\r\n\t\t},\r\n\r\n\t\tupdateSize : function() {\r\n\t\t\tPanel.prototype.updateSize.call(this);\r\n\r\n\t\t\tthis.searchIcon.size.set(this.size.y * 0.6, this.size.y * 0.6);\r\n\t\t\tthis.searchIcon.position.set(this.size.y * 0.2, this.size.y * 0.2);\r\n\t\t\tthis.searchIcon.updateInterface();\r\n\r\n\t\t\tthis.search.size.set(this.size.x - this.size.y * 1.4, this.size.y * 0.8);\r\n\t\t\tthis.search.position.set(this.size.y * 0.2, this.size.y * 0.1);\r\n\t\t\tthis.search.updateInterface();\r\n\t\t}\r\n\t});\r\n\r\n\treturn texts.SearchBox = SearchBox;\r\n});\ndefine('skylark-widgets-texts/text-label',[\r\n\t\"skylark-widgets-base/widget\",\r\n\t\"skylark-widgets-base/mixins/text-mixin\",\r\n\t\"./texts\"\r\n],function(\r\n\tWidget,\r\n\tTextMixin,\r\n\ttexts\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text element without background.\r\n\t * \r\n\t * @class Text\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\r\n\tvar TextLabel = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\r\n\r\n\t\t\tthis._buildTextSpan();\r\n\t\t},\r\n\r\n\r\n\t\t...TextMixin\r\n\r\n\t});\r\n\r\n\tTextLabel.CENTER = TextMixin.CENTER; // 0;\r\n\tTextLabel.LEFT = TextMixin.LEFT; // 1;\r\n\tTextLabel.RIGHT = TextMixin.RIGHT; // 2;\r\n\tTextLabel.TOP = TextMixin.TOP; // 3;\r\n\tTextLabel.BOTTOM = TextMixin.BOTTOM; // 4;\r\n\r\n\tTextLabel.CLIP = TextMixin.CLIP; // 10;\r\n\tTextLabel.ELLIPSIS = TextMixin.ELLIPSIS; //11;\r\n\r\n\treturn texts.TextLabel = TextLabel;\r\n});\ndefine('skylark-widgets-texts/text-area',[\r\n\t\"skylark-widgets-base/widget\",\r\n\t\"./texts\"\t\r\n],function(Widget,texts){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text area input is used to handle multi line string values.\r\n\t *\r\n\t * @class TextArea\r\n\t * @extends {Component}\r\n\t */\r\n\tvar TextArea = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"textarea\");\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.overflow = \"auto\";\r\n\t\t\tthis._elm.style.resize = \"none\";\r\n\t\t\t//this._elm.style.backgroundColor = Editor.theme.boxColor;\r\n\t\t\t//this._elm.style.fontFamily = Editor.theme.font;\r\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\r\n\t\t\tthis._elm.style.backgroundColor = skin.boxColor;\r\n\t\t\tthis._elm.style.fontFamily = skin.font;\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.outline = \"none\";\r\n\t\t\tthis._elm.style.borderStyle = \"none\";\r\n\t\t\tthis._elm.style.boxSizing = \"border-box\";\r\n\t\t\tthis._elm.style.borderRadius = \"4px\";\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\t/*\r\n\t\t\tthis._elm.oncontextmenu = function(event) {\r\n\t\t\t\tvar context = new ContextMenu(DocumentBody);\r\n\t\t\t\tcontext.size.set(130, 20);\r\n\t\t\t\tcontext.position.set(event.clientX, event.clientY);\r\n\t\t\t\tcontext.addOption(Locale.copy, function()\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tEditor.clipboard.set(value.slice(self.element.selectionStart, self.element.selectionEnd), \"text\");\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.cut, function(){\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tEditor.clipboard.set(value.slice(self.element.selectionStart, self.element.selectionEnd), \"text\");\r\n\t\t\t\t\tself.element.value = value.slice(0, self.element.selectionStart) + value.slice(self.element.selectionEnd, value.length);\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.paste, function() {\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tvar paste = Editor.clipboard.get(\"text\");\r\n\t\t\t\t\tif(paste !== undefined)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tself.element.value = value.slice(0, self.element.selectionStart) + paste + value.slice(self.element.selectionEnd, value.length);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.selectAll, function() {\r\n\t\t\t\t\tself.element.select();\r\n\t\t\t\t});\r\n\t\t\t\tcontext.updateInterface();\r\n\t\t\t};\r\n\t\t\t*/\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set font configuration to use for the text presented in this component.\r\n\t\t *\r\n\t\t * May also affect some types of children components. \r\n\t\t * \r\n\t\t * @method setFont\r\n\t\t * @param {string} fontFamily Font family.\r\n\t\t * @param {number} fontWeight Font weigth, sets how thick or thin characters in text should be displayed.\r\n\t\t * @param {string} fontStyle Font style, specifies the font style for a text.\r\n\t\t */\r\n\t\tsetFont : function(fontFamily, fontWeight, fontStyle){\r\n\t\t\tthis._elm.style.fontFamily = fontFamily;\r\n\r\n\t\t\tif(fontWeight !== undefined) {\r\n\t\t\t\tthis._elm.style.fontWeight = fontWeight;\r\n\t\t\t}\r\n\r\n\t\t\tif(fontStyle !== undefined) {\r\n\t\t\t\tthis._elm.style.fontStyle = fontStyle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set the wrap mode used for this text area.\r\n\t\t *\r\n\t\t * Only affects the value on form submission.\r\n\t\t *\r\n\t\t * @method setWrap\r\n\t\t * @param {string} mode The wrap mode to use.\r\n\t\t */\r\n\t\tsetWrap : function(mode) {\r\n\t\t\tthis._elm.wrap = mode;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set the disabled state of the element.\r\n\t\t *\r\n\t\t * @method setDisabled\r\n\t\t * @param {boolean} disabled\r\n\t\t */\r\n\t\tsetDisabled : function(value) {\r\n\t\t\tthis._elm.disabled = value;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set oninput callback called after every letter typed into the box.\r\n\t\t *\r\n\t\t * Should be used only for immediate input effect, or can be used with a timeout value to prevent high CPU usage.\r\n\t\t *\r\n\t\t * @method setOnInput\r\n\t\t * @param {Function} onInput Callback method called everytime the user types something.\r\n\t\t * @param {number} timeout Time (ms) after the user stopped typing to activate the callback.\r\n\t\t */\r\n\t\tsetOnInput : function(onInput, timeout) {\r\n\t\t\tif(timeout !== undefined) {\r\n\t\t\t\tvar timer = null;\r\n\t\t\t\tvar self = this;\r\n\r\n\t\t\t\tthis._elm.oninput = function(event) {\r\n\t\t\t\t\tif(timer !== null) {\r\n\t\t\t\t\t\tclearTimeout(timer);\r\n\t\t\t\t\t\ttimer = null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttimer = setTimeout(function() {\r\n\t\t\t\t\t\tonInput();\r\n\t\t\t\t\t\ttimer = null;\r\n\t\t\t\t\t}, timeout)\r\n\t\t\t\t};\r\n\t\t\t} else \t{\r\n\t\t\t\tthis._elm.oninput = onInput;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set onchange callback, called after changes.\r\n\t\t *\r\n\t\t * @method setOnChange\r\n\t\t * @param {Function} onChange\r\n\t\t */\r\n\t\tsetOnChange : function(onChange) {\r\n\t\t\tthis._elm.onchange = onChange;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set value stored in the input element.\r\n\t\t *\r\n\t\t * @method setText\r\n\t\t * @param {Object} text\r\n\t\t */\r\n\t\tsetText : function(text) {\r\n\t\t\tthis._elm.value = text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get text stored in the input element.\r\n\t\t *\r\n\t\t * @method getText\r\n\t\t * @return {string} Text stored in the input element.\r\n\t\t */\r\n\t\tgetText : function() {\r\n\t\t\treturn this._elm.value;\r\n\t\t}\r\n\t});\r\n\r\n\t/**\r\n\t * Set value stored in the input element. Same as setText().\r\n\t *\r\n\t * @method setValue\r\n\t * @param {Object} text\r\n\t */\r\n\tTextArea.prototype.setValue = TextArea.prototype.setText;\r\n\r\n\t/**\r\n\t * Get text stored in the input element. Same as getText().\r\n\t *\r\n\t * @method getValue\r\n\t * @return {string} Text stored in the input element.\r\n\t */\r\n\tTextArea.prototype.getValue = TextArea.prototype.getText;\r\n\r\n\r\n\t/**\r\n\t * The text in the textarea is not wrapped. This is default.\r\n\t *\r\n\t * @static\r\n\t * @attribute SOFT\r\n\t * @type {string}\r\n\t */\r\n\tTextArea.SOFT = \"soft\";\r\n\r\n\t/**\r\n\t * The text in the textarea is wrapped (contains newlines).\r\n\t *\r\n\t * When \"hard\" is used, the cols attribute must be specified.\r\n\t *\r\n\t * @static\r\n\t * @attribute HARD\r\n\t * @type {string}\r\n\t */\r\n\tTextArea.HARD = \"hard\";\r\n\r\n\treturn texts.TextArea = TextArea;\r\n});\ndefine('skylark-widgets-texts/main',[\r\n\t\"./texts\",\r\n\t\"./password-box\",\r\n\t\"./search-box\",\r\n\t\"./text-label\",\r\n\t\"./text-area\",\r\n\t\"./text-box\"\r\n],function(texts){\r\n\treturn texts;\r\n});\ndefine('skylark-widgets-texts', ['skylark-widgets-texts/main'], function (main) { return main; });\n\n"]}