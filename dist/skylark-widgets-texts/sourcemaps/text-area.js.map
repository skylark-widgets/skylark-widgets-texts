{"version":3,"sources":["text-area.js"],"names":["define","Widget","texts","TextArea","inherit","_construct","parent","prototype","call","this","skin","getSkin","_elm","style","overflow","resize","backgroundColor","boxColor","fontFamily","font","color","textColor","outline","borderStyle","boxSizing","borderRadius","setFont","fontWeight","fontStyle","undefined","setWrap","mode","wrap","setDisabled","value","disabled","setOnInput","onInput","timeout","timer","oninput","event","clearTimeout","setTimeout","setOnChange","onChange","onchange","setText","text","getText","setValue","getValue","SOFT","HARD"],"mappings":";;;;;;;AAAAA,QACC,8BACA,WACC,SAASC,EAAOC,GACjB,aAQA,IAAIC,EAAWF,EAAOG,SAErBC,WAAa,SAAUC,GACtBL,EAAOM,UAAUF,WAAWG,KAAKC,KAAMH,EAAQ,YAE/C,IAAII,EAAOD,KAAKE,UAEhBF,KAAKG,KAAKC,MAAMC,SAAW,OAC3BL,KAAKG,KAAKC,MAAME,OAAS,OAIzBN,KAAKG,KAAKC,MAAMG,gBAAkBN,EAAKO,SACvCR,KAAKG,KAAKC,MAAMK,WAAaR,EAAKS,KAClCV,KAAKG,KAAKC,MAAMO,MAAQV,EAAKW,UAC7BZ,KAAKG,KAAKC,MAAMS,QAAU,OAC1Bb,KAAKG,KAAKC,MAAMU,YAAc,OAC9Bd,KAAKG,KAAKC,MAAMW,UAAY,aAC5Bf,KAAKG,KAAKC,MAAMY,aAAe,OA6ChCC,QAAU,SAASR,EAAYS,EAAYC,GAC1CnB,KAAKG,KAAKC,MAAMK,WAAaA,OAEXW,IAAfF,IACFlB,KAAKG,KAAKC,MAAMc,WAAaA,QAGbE,IAAdD,IACFnB,KAAKG,KAAKC,MAAMe,UAAYA,IAY9BE,QAAU,SAASC,GAClBtB,KAAKG,KAAKoB,KAAOD,GASlBE,YAAc,SAASC,GACtBzB,KAAKG,KAAKuB,SAAWD,GAYtBE,WAAa,SAASC,EAASC,GAC9B,QAAeT,IAAZS,EAAuB,CACzB,IAAIC,EAAQ,KAGZ9B,KAAKG,KAAK4B,QAAU,SAASC,GACf,OAAVF,IACFG,aAAaH,GACbA,EAAQ,MAGTA,EAAQI,WAAW,WAClBN,IACAE,EAAQ,MACND,SAGJ7B,KAAKG,KAAK4B,QAAUH,GAUtBO,YAAc,SAASC,GACtBpC,KAAKG,KAAKkC,SAAWD,GAStBE,QAAU,SAASC,GAClBvC,KAAKG,KAAKsB,MAAQc,GASnBC,QAAU,WACT,OAAOxC,KAAKG,KAAKsB,SAyCnB,OA/BA/B,EAASI,UAAU2C,SAAW/C,EAASI,UAAUwC,QAQjD5C,EAASI,UAAU4C,SAAWhD,EAASI,UAAU0C,QAUjD9C,EAASiD,KAAO,OAWhBjD,EAASkD,KAAO,OAETnD,EAAMC,SAAWA","file":"../text-area.js","sourcesContent":["define([\r\n\t\"skylark-widgets-base/widget\",\r\n\t\"./texts\"\t\r\n],function(Widget,texts){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text area input is used to handle multi line string values.\r\n\t *\r\n\t * @class TextArea\r\n\t * @extends {Component}\r\n\t */\r\n\tvar TextArea = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"textarea\");\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.overflow = \"auto\";\r\n\t\t\tthis._elm.style.resize = \"none\";\r\n\t\t\t//this._elm.style.backgroundColor = Editor.theme.boxColor;\r\n\t\t\t//this._elm.style.fontFamily = Editor.theme.font;\r\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\r\n\t\t\tthis._elm.style.backgroundColor = skin.boxColor;\r\n\t\t\tthis._elm.style.fontFamily = skin.font;\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.outline = \"none\";\r\n\t\t\tthis._elm.style.borderStyle = \"none\";\r\n\t\t\tthis._elm.style.boxSizing = \"border-box\";\r\n\t\t\tthis._elm.style.borderRadius = \"4px\";\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\t/*\r\n\t\t\tthis._elm.oncontextmenu = function(event) {\r\n\t\t\t\tvar context = new ContextMenu(DocumentBody);\r\n\t\t\t\tcontext.size.set(130, 20);\r\n\t\t\t\tcontext.position.set(event.clientX, event.clientY);\r\n\t\t\t\tcontext.addOption(Locale.copy, function()\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tEditor.clipboard.set(value.slice(self.element.selectionStart, self.element.selectionEnd), \"text\");\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.cut, function(){\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tEditor.clipboard.set(value.slice(self.element.selectionStart, self.element.selectionEnd), \"text\");\r\n\t\t\t\t\tself.element.value = value.slice(0, self.element.selectionStart) + value.slice(self.element.selectionEnd, value.length);\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.paste, function() {\r\n\t\t\t\t\tvar value = self.element.value;\r\n\t\t\t\t\tvar paste = Editor.clipboard.get(\"text\");\r\n\t\t\t\t\tif(paste !== undefined)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tself.element.value = value.slice(0, self.element.selectionStart) + paste + value.slice(self.element.selectionEnd, value.length);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tcontext.addOption(Locale.selectAll, function() {\r\n\t\t\t\t\tself.element.select();\r\n\t\t\t\t});\r\n\t\t\t\tcontext.updateInterface();\r\n\t\t\t};\r\n\t\t\t*/\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set font configuration to use for the text presented in this component.\r\n\t\t *\r\n\t\t * May also affect some types of children components. \r\n\t\t * \r\n\t\t * @method setFont\r\n\t\t * @param {string} fontFamily Font family.\r\n\t\t * @param {number} fontWeight Font weigth, sets how thick or thin characters in text should be displayed.\r\n\t\t * @param {string} fontStyle Font style, specifies the font style for a text.\r\n\t\t */\r\n\t\tsetFont : function(fontFamily, fontWeight, fontStyle){\r\n\t\t\tthis._elm.style.fontFamily = fontFamily;\r\n\r\n\t\t\tif(fontWeight !== undefined) {\r\n\t\t\t\tthis._elm.style.fontWeight = fontWeight;\r\n\t\t\t}\r\n\r\n\t\t\tif(fontStyle !== undefined) {\r\n\t\t\t\tthis._elm.style.fontStyle = fontStyle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set the wrap mode used for this text area.\r\n\t\t *\r\n\t\t * Only affects the value on form submission.\r\n\t\t *\r\n\t\t * @method setWrap\r\n\t\t * @param {string} mode The wrap mode to use.\r\n\t\t */\r\n\t\tsetWrap : function(mode) {\r\n\t\t\tthis._elm.wrap = mode;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set the disabled state of the element.\r\n\t\t *\r\n\t\t * @method setDisabled\r\n\t\t * @param {boolean} disabled\r\n\t\t */\r\n\t\tsetDisabled : function(value) {\r\n\t\t\tthis._elm.disabled = value;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set oninput callback called after every letter typed into the box.\r\n\t\t *\r\n\t\t * Should be used only for immediate input effect, or can be used with a timeout value to prevent high CPU usage.\r\n\t\t *\r\n\t\t * @method setOnInput\r\n\t\t * @param {Function} onInput Callback method called everytime the user types something.\r\n\t\t * @param {number} timeout Time (ms) after the user stopped typing to activate the callback.\r\n\t\t */\r\n\t\tsetOnInput : function(onInput, timeout) {\r\n\t\t\tif(timeout !== undefined) {\r\n\t\t\t\tvar timer = null;\r\n\t\t\t\tvar self = this;\r\n\r\n\t\t\t\tthis._elm.oninput = function(event) {\r\n\t\t\t\t\tif(timer !== null) {\r\n\t\t\t\t\t\tclearTimeout(timer);\r\n\t\t\t\t\t\ttimer = null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttimer = setTimeout(function() {\r\n\t\t\t\t\t\tonInput();\r\n\t\t\t\t\t\ttimer = null;\r\n\t\t\t\t\t}, timeout)\r\n\t\t\t\t};\r\n\t\t\t} else \t{\r\n\t\t\t\tthis._elm.oninput = onInput;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set onchange callback, called after changes.\r\n\t\t *\r\n\t\t * @method setOnChange\r\n\t\t * @param {Function} onChange\r\n\t\t */\r\n\t\tsetOnChange : function(onChange) {\r\n\t\t\tthis._elm.onchange = onChange;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set value stored in the input element.\r\n\t\t *\r\n\t\t * @method setText\r\n\t\t * @param {Object} text\r\n\t\t */\r\n\t\tsetText : function(text) {\r\n\t\t\tthis._elm.value = text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get text stored in the input element.\r\n\t\t *\r\n\t\t * @method getText\r\n\t\t * @return {string} Text stored in the input element.\r\n\t\t */\r\n\t\tgetText : function() {\r\n\t\t\treturn this._elm.value;\r\n\t\t}\r\n\t});\r\n\r\n\t/**\r\n\t * Set value stored in the input element. Same as setText().\r\n\t *\r\n\t * @method setValue\r\n\t * @param {Object} text\r\n\t */\r\n\tTextArea.prototype.setValue = TextArea.prototype.setText;\r\n\r\n\t/**\r\n\t * Get text stored in the input element. Same as getText().\r\n\t *\r\n\t * @method getValue\r\n\t * @return {string} Text stored in the input element.\r\n\t */\r\n\tTextArea.prototype.getValue = TextArea.prototype.getText;\r\n\r\n\r\n\t/**\r\n\t * The text in the textarea is not wrapped. This is default.\r\n\t *\r\n\t * @static\r\n\t * @attribute SOFT\r\n\t * @type {string}\r\n\t */\r\n\tTextArea.SOFT = \"soft\";\r\n\r\n\t/**\r\n\t * The text in the textarea is wrapped (contains newlines).\r\n\t *\r\n\t * When \"hard\" is used, the cols attribute must be specified.\r\n\t *\r\n\t * @static\r\n\t * @attribute HARD\r\n\t * @type {string}\r\n\t */\r\n\tTextArea.HARD = \"hard\";\r\n\r\n\treturn texts.TextArea = TextArea;\r\n});"]}